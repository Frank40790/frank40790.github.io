{
  "en": {
    "title": "OpenGL Projection",
    "what_does_this_do": "What does this do?",
    "intro_description": "This is just a small experiment that I've done in a bit of time. Using the projection in linear algebra on computer graphics (OpenGL)",
    "journey": "Journey",
    "journey_intro": "Starting from the very beginning, I was looking at a question in the linear algebra question booklet. Suddenly coming across a question about projection from 3D to 2D. And I decided to give it a try on OpenGL. From the start, OpenGL is not working correctly, and soon I figure out that I need GLFW installed to get the code working correctly. Once the basic frame is running properly, I started to think about those algebraic things such as transformation matrix, rotation matrix etc...",
    "version1_title": "This is where I begin version 1.",
    "version1_text1": "When developing version 1, I am just using some basic C to make it work. I start by building the array in Stack memory and transfer it into Heap memory by a function.",
    "version1_text2": "Then I construct the transformation matrix where I can alter the original 3D shape. I also construct the rotation matrix for the rotating animation. Finally I added a projection matrix so that the 3D shape can be projected onto the 2D coordinate system on OpenGL.",
    "version1_text3": "I also coded up a matrix multiplication function so that the matrix can be applied onto the vector",
    "version2_title": "Starting version 2.",
    "version2_text1": "In version 1, it is mainly used for doing a \"proof of concept\", so I did not consider anything about dynamic memory management. Therefore, in version 2, I refined some code to use structs and dynamic memory, where the memory used are freed. This time, function pointers are also used for selecting between different matrix multiplication method.",
    "version1_image_alt": "code version 1",
    "version2_image_alt": "code version 2",
    "language_used": "Programming language used?",
    "what_ive_learned": "What I've learnt?",
    "learn_intro": "I've applied some of my knowledge in linear algebra and C and built a rotating shape in OpenGL. On the way, I've learnt how to",
    "learn_point1": "Build transformation matrix, rotation matrix and projection matrix",
    "learn_point2": "Use dynamic memory allocation to do matrix operation",
    "code": "Code"
  },
  "zh": {
    "title": "OpenGL 投影",
    "what_does_this_do": "這是什麼？",
    "intro_description": "這是一個我用一點時間完成的小實驗。使用線性代數中的投影概念應用於電腦圖形（OpenGL）中。",
    "journey": "開發歷程",
    "journey_intro": "一開始，我在閱讀線性代數的題本時，突然看到一道關於從 3D 投影到 2D 的題目。我決定在 OpenGL 上試試看。一開始 OpenGL 無法正常工作，我發現需要安裝 GLFW 才能順利執行代碼。基本框架運作後，我開始思考一些代數概念，例如轉換矩陣、旋轉矩陣等。",
    "version1_title": "這是我開始開發版本 1 的地方。",
    "version1_text1": "在開發版本 1 時，我只是用基本的 C 語言讓它運作。我從在堆疊記憶體建立陣列開始，然後透過函式轉換到堆記憶體中。",
    "version1_text2": "接著我建構了轉換矩陣，可以改變原始的 3D 形狀。我也建構了旋轉矩陣來做動畫。最後，我加入了投影矩陣，讓 3D 形狀可以投影到 OpenGL 的 2D 座標系統上。",
    "version1_text3": "我還撰寫了矩陣乘法的函式，讓矩陣可以套用在向量上。",
    "version2_title": "開始版本 2。",
    "version2_text1": "版本 1 只是用來做概念驗證，因此沒考慮記憶體管理。在版本 2 中，我重構了一些代碼，使用 struct 和動態記憶體管理，也加上釋放記憶體的步驟。此外還用上函式指標來選擇不同的矩陣乘法方式。",
    "version1_image_alt": "代碼版本 1",
    "version2_image_alt": "代碼版本 2",
    "language_used": "使用的程式語言？",
    "what_ive_learned": "我學到了什麼？",
    "learn_intro": "我應用了線性代數與 C 語言的知識，在 OpenGL 中建立了旋轉圖形。在過程中我學到了：",
    "learn_point1": "建構轉換矩陣、旋轉矩陣與投影矩陣",
    "learn_point2": "使用動態記憶體分配來進行矩陣運算",
    "code": "原始碼"
  },
  "de": {
    "title": "OpenGL Projektion",
    "what_does_this_do": "Was macht das?",
    "intro_description": "Dies ist ein kleines Experiment, das ich in kurzer Zeit durchgeführt habe. Es nutzt Projektionen aus der linearen Algebra für Computergrafik (OpenGL).",
    "journey": "Entwicklung",
    "journey_intro": "Zu Beginn habe ich eine Frage aus einem Heft zur linearen Algebra gelesen und bin auf eine Aufgabe zur Projektion von 3D auf 2D gestoßen. Ich wollte das mit OpenGL ausprobieren. Anfangs funktionierte OpenGL nicht richtig, bis ich herausfand, dass GLFW installiert sein muss. Nachdem das Grundgerüst lief, begann ich, über Dinge wie Transformationsmatrizen, Rotationsmatrizen usw. nachzudenken.",
    "version1_title": "Hier beginnt Version 1.",
    "version1_text1": "In Version 1 habe ich einfache C-Funktionen verwendet, um es zum Laufen zu bringen. Ich begann damit, Arrays im Stack-Speicher zu erstellen und sie in den Heap-Speicher zu übertragen.",
    "version1_text2": "Dann habe ich eine Transformationsmatrix erstellt, mit der ich die ursprüngliche 3D-Form verändern konnte. Ebenso eine Rotationsmatrix für Animationen. Schließlich kam noch eine Projektionsmatrix hinzu, um das 3D-Modell auf ein 2D-Koordinatensystem zu projizieren.",
    "version1_text3": "Ich habe auch eine Matrix-Multiplikationsfunktion programmiert, um Matrizen auf Vektoren anzuwenden.",
    "version2_title": "Start von Version 2.",
    "version2_text1": "Version 1 war ein reiner Proof of Concept. Für Version 2 habe ich den Code verbessert, Strukturen und dynamischen Speicher verwendet und auch Funktionzeiger eingebaut, um zwischen Methoden zu wählen.",
    "version1_image_alt": "Code Version 1",
    "version2_image_alt": "Code Version 2",
    "language_used": "Welche Programmiersprachen wurden verwendet?",
    "what_ive_learned": "Was habe ich gelernt?",
    "learn_intro": "Ich habe mein Wissen in linearer Algebra und C genutzt, um eine rotierende Form in OpenGL zu erstellen. Dabei habe ich gelernt:",
    "learn_point1": "Erstellen von Transformations-, Rotations- und Projektionsmatrizen",
    "learn_point2": "Verwendung dynamischer Speicherverwaltung für Matrixoperationen",
    "code": "Quellcode"
  },
  "ja": {
    "title": "OpenGL 投影",
    "what_does_this_do": "これは何をするもの？",
    "intro_description": "これはちょっとした実験で、コンピュータグラフィックス（OpenGL）における線形代数の投影を使っています。",
    "journey": "経緯",
    "journey_intro": "最初から始めて、線形代数の問題集を見ていました。突然、3Dから2Dへの投影に関する問題に出会い、OpenGLで試してみることにしました。最初はOpenGLが正しく動作せず、コードを正しく動かすにはGLFWをインストールする必要があると気づきました。基本的なフレームが動くようになってから、変換行列や回転行列などの代数的なことを考え始めました。",
    "version1_title": "ここからバージョン1を始めました。",
    "version1_text1": "バージョン1の開発では、基本的なC言語のみを使って動作させました。まずスタックメモリに配列を作り、それを関数でヒープメモリに転送します。",
    "version1_text2": "その後、元の3D形状を変形するための変換行列を作成しました。また回転アニメーション用の回転行列も作成し、最後に3D形状をOpenGLの2D座標系に投影するための投影行列を追加しました。",
    "version1_text3": "行列をベクトルに適用するための行列乗算関数も実装しました。",
    "version2_title": "バージョン2を開始。",
    "version2_text1": "バージョン1は主に「コンセプトの証明」用だったため、動的メモリ管理については考慮していませんでした。そこでバージョン2では、構造体と動的メモリを使用し、使用後にメモリを解放するようにコードを改良しました。また、関数ポインタを使って異なる行列乗算方法を選択できるようにしました。",
    "version1_image_alt": "コード バージョン1",
    "version2_image_alt": "コード バージョン2",
    "language_used": "使用したプログラミング言語は？",
    "what_ive_learned": "学んだことは？",
    "learn_intro": "線形代数とC言語の知識を応用し、OpenGLで回転する形状を作りました。その過程で以下を学びました。",
    "learn_point1": "変換行列、回転行列、投影行列の作成",
    "learn_point2": "動的メモリ割り当てを使った行列演算の実装",
    "code": "コード"
  },
  "es": {
    "title": "Proyección OpenGL",
    "what_does_this_do": "¿Qué hace esto?",
    "intro_description": "Este es un pequeño experimento que hice en poco tiempo. Usando proyecciones en álgebra lineal aplicadas a gráficos por computadora (OpenGL).",
    "journey": "Trayectoria",
    "journey_intro": "Empecé desde el principio, revisando un cuaderno de preguntas de álgebra lineal. De repente, encontré una pregunta sobre proyección de 3D a 2D. Decidí probarlo en OpenGL. Al principio, OpenGL no funcionaba bien y pronto descubrí que necesitaba instalar GLFW para que el código funcionara correctamente. Cuando el marco básico funcionó bien, empecé a pensar en cosas algebraicas como matrices de transformación, matrices de rotación, etc.",
    "version1_title": "Aquí comencé la versión 1.",
    "version1_text1": "En el desarrollo de la versión 1, solo usé C básico para hacer que funcione. Empecé construyendo un arreglo en memoria Stack y luego lo transferí a memoria Heap mediante una función.",
    "version1_text2": "Luego construí la matriz de transformación para alterar la forma 3D original. También construí la matriz de rotación para la animación rotatoria. Finalmente agregué una matriz de proyección para proyectar la forma 3D en un sistema de coordenadas 2D en OpenGL.",
    "version1_text3": "También programé una función de multiplicación de matrices para aplicar la matriz al vector.",
    "version2_title": "Comenzando la versión 2.",
    "version2_text1": "En la versión 1, principalmente era una \"prueba de concepto\", así que no consideré la gestión dinámica de memoria. Por ello, en la versión 2, mejoré el código usando structs y memoria dinámica, liberando la memoria usada. Esta vez también usé punteros a funciones para seleccionar diferentes métodos de multiplicación de matrices.",
    "version1_image_alt": "código versión 1",
    "version2_image_alt": "código versión 2",
    "language_used": "¿Lenguaje de programación usado?",
    "what_ive_learned": "¿Qué he aprendido?",
    "learn_intro": "Apliqué algo de mi conocimiento en álgebra lineal y C para construir una forma rotatoria en OpenGL. En el proceso, aprendí a",
    "learn_point1": "Construir matrices de transformación, rotación y proyección",
    "learn_point2": "Usar asignación dinámica de memoria para operaciones con matrices",
    "code": "Código"
  },
  "ko": {
    "title": "OpenGL 투영",
    "what_does_this_do": "이것은 무엇을 하나요?",
    "intro_description": "짧은 시간에 해본 작은 실험입니다. 컴퓨터 그래픽(OpenGL)에서 선형대수의 투영을 사용했습니다.",
    "journey": "과정",
    "journey_intro": "처음부터 시작해서 선형대수 문제집을 보고 있었습니다. 갑자기 3D에서 2D로의 투영에 관한 문제가 나와 OpenGL에서 시도해 보기로 했습니다. 처음에 OpenGL이 제대로 작동하지 않아 코드가 제대로 작동하려면 GLFW를 설치해야 한다는 것을 알게 되었습니다. 기본 프레임이 제대로 동작하기 시작하자 변환 행렬, 회전 행렬 등 대수적 개념을 생각하기 시작했습니다.",
    "version1_title": "여기서 버전 1을 시작했습니다.",
    "version1_text1": "버전 1 개발 시 기본적인 C를 사용해 작동시켰습니다. 먼저 스택 메모리에 배열을 만들고 함수를 통해 힙 메모리로 옮겼습니다.",
    "version1_text2": "그 후 원래 3D 모양을 변경할 수 있는 변환 행렬을 만들었습니다. 회전 애니메이션을 위한 회전 행렬도 만들었고, 마지막으로 3D 모양을 OpenGL의 2D 좌표계에 투영하는 투영 행렬을 추가했습니다.",
    "version1_text3": "행렬을 벡터에 적용하기 위한 행렬 곱셈 함수도 구현했습니다.",
    "version2_title": "버전 2 시작.",
    "version2_text1": "버전 1은 주로 ‘개념 증명’ 용이었기에 동적 메모리 관리를 고려하지 않았습니다. 그래서 버전 2에서는 구조체와 동적 메모리를 사용하도록 코드를 개선했고, 사용한 메모리를 해제했습니다. 이번에는 함수 포인터를 사용해 다양한 행렬 곱셈 방법을 선택할 수 있게 했습니다.",
    "version1_image_alt": "코드 버전 1",
    "version2_image_alt": "코드 버전 2",
    "language_used": "사용한 프로그래밍 언어는?",
    "what_ive_learned": "배운 것들?",
    "learn_intro": "선형대수와 C에 대한 지식을 적용해 OpenGL에서 회전하는 모양을 만들었습니다. 그 과정에서 다음을 배웠습니다.",
    "learn_point1": "변환 행렬, 회전 행렬, 투영 행렬 만들기",
    "learn_point2": "동적 메모리 할당을 사용한 행렬 연산 구현",
    "code": "코드"
  }
}